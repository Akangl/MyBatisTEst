<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>


<!--    指定properties文件的位置,从类路径根开始找文件-->
    <properties resource="jdbc.properties"/>

<!--    settings:控制mybatis全局行为-->
    <settings>
<!--        设置mybatis输出日志-->
        <setting name="logImpl" value="STDOUT_LOGGING"/>
    </settings>



    <!--    定义别名-->
    <typeAliases>
<!--    第一种方式
           可以定义一个类型的自定义别名
                type:自定义类型的全限定名称
                alias:别名
-->
        <typeAlias type="com.java.domain.Student" alias="Student" />

<!--    第二种方式
            <package> name是包名,这个包中的所有类,类名就是别名(类名不区分大小写)
-->
        <package name="com.java.vo" />
    </typeAliases>


<!---->
    <environments default="mybatis">
<!--        数据库演示1-->
        <environment id="mybatis">
<!--
        transactionManager：mybatis提交事务，回滚事务的方式
            type：事务处理的类型
                1)JDBC:表示mybatis底层是调用JDBC中的Connection对象，commit，rollback
                2)MANAGED:把mybatis的事务处理委托给其他的容器(一个服务器软件，一个框架(Spring))
-->
            <transactionManager type="JDBC"/>
<!--
        dataSource：表示数据源，Java体系中，规定实现了Javax.sql.DataSource接口的都是数据源
                    数据源表示Connection对象的
        Type：指定数据源的类型
            1).POOLED:使用连接池，mybatis会创建PooledDataSource类
            2).UPOOLED：不使用连接池，在每次执行sql语句，先创建连接，执行sql，在关闭连接
                        mybatis会创建一个UnPooledDataSource，管理Connection对象的使用
            3).JNDI:java命名和目录服务(windows注册表)
-->
            <dataSource type="POOLED">
<!--                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>-->
<!--                <property name="url" value="jdbc:mysql://192.168.50.128:3306/ssm?serverTimezone=UTC"/>-->
<!--                <property name="username" value="root"/>-->
<!--                <property name="password" value="980822"/>-->
<!--            使用properties-->
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.user}"/>
                <property name="password" value="${jdbc.passwd}"/>
            </dataSource>
        </environment>
    </environments>


<!--
    <properties resource="jdbc.properties"/>
    <environments default="mybatis">
        <environment id="mybatis">
            <transactionManager type="JDBC"></transactionManager>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.user}"/>
                <property name="password" value="${jdbc.passwd}"/>
            </dataSource>
        </environment>
    </environments>

-->

    <mappers>
<!--
第一种方式
    指定多个mapper文件

-->
        <mapper resource="com/java/dao/StudentDao.xml"/>
        <mapper resource="com/java/dao/OrderDao.xml"/>

<!--
第二种，使用包名
    name:xml文件(mapper文件)所在的包名,这个包中所有的xml文件一次都能加载给mybatis
    使用package的要求:
        1).mapper文件名称需要和接口名称一样,区分大小写的一样
        2).mapper文件需要和dao接口需要在同一目录
-->
        <package name="com.java.dao"/>
    </mappers>
</configuration>


<!--
    mybatis的主配置文件：主要定义了数据库的配置信息,sql映射文件的位置

    1.约束文件:
        <!DOCTYPE configuration
            PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
            "http://mybatis.org/dtd/mybatis-3-config.dtd">
        mybatis-3-config.dtd：约束文件的名称
    2.configuration:
            根标签

      environments:
            环境配置的：数据库的连接信息
            default:必须和某个environment的id值一样
            告诉mybatis使用那个数据库的连接信息。
            再有多个数据库的连接信息时,可以通过修改default的值来连接不同的数据库信息
      environment:
            一个数据库信息的配置,环境
         id:一个唯一值,自定义，表示环境的名称
      transactionManager:
            mybatis的事务类型
         type:JDBC(表示使用JDBC中的Connection对象的commit,roolback做事务处理)

      dataSource:
            表示数据源,连接数据库的
         type:表示数据源的类型,POOLED表示使用连接池
      property:
         name:driver,url,username,password:是不能改变的，不能自定义
    3.mappers:
        sql映射文件的位置
      mapper:
        一个mapper标签指定一个文件的位置;
        从类路径开始的路径信息(代码编译之后,有一个target/classes)(target/classes就是类路径)

-->