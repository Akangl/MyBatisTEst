<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.java.dao.StudentDao">
<!--    查询操作-->
    <select id="selectStudent" resultType="com.java.domain.Student">
        select * from student
    </select>

<!--    插入操作-->
    <insert id="insertStudent">
--         insert into student values(20004,"周齐","zhouqi@110.com",20);
        insert into student values(#{id},#{name},#{email},#{age});
    </insert>

    <select id="selectStudentById"  resultType="com.java.domain.Student">
        select id,name,age,email from student where id=#{id}
    </select>

    <select id="selectStudentByName" resultType="com.java.domain.Student">
        select * from student where name=#{name}
    </select>

    <select id="selectStudentByAge" resultType="com.java.domain.Student">
        select * from student where age >= #{age}
    </select>

<!--多个参数：使用Param命名-->
    <select id="selectMulitParam" resultType="com.java.domain.Student">
        select * from student where name=#{myname} or age=#{myage}
    </select>

    <select id="selectXhnlParam" resultType="com.java.domain.Student">
        select * from student where id=#{myid} and age=#{myage}
    </select>


    <select id="selectUseOredr" resultType="com.java.domain.Student">
        select * from student order by ${colName}
    </select>
<!--多个参数：使用Java对象的属性值,作为参数实际值
        使用对象语法：#{属性名 , javaType=类型名称 , jdbcType=数据类型}很少用
        javaType:java中的属性数据类型
        jdbcType:在数据库中的数据类型
        例如：
            #{paramName , javaType=java.lang.String , jdbcType=VARCHAR}

       简化方式：
            #{属性名}
-->
<!--    <select id="selectMulitObject" resultType="com.java.domain.Student">
        select * from student where
        name=#{paramName,javaType=java.lang.String,jdbcType=VARCHAR}
        or age=#{paramAge,javaType=java.lang.Integer,jdbcType=Integer}
    </select>-->
    <select id="selectMulitObject" resultType="com.java.domain.Student">
        select * from student where name=#{paramName} or age=#{paramAge}
    </select>

    <select id="selectMulitStudent" resultType="com.java.domain.Student">
        select * from student where name=#{name} or age=#{age}
    </select>

<!--    按位置-->
    <select id="selectByNameAndAge" resultType="com.java.domain.Student">
        select * from student where name=#{arg0} or age=#{arg1}
    </select>

<!--    使用Map集合-->
    <select id="selectMulitMap" resultType="com.java.domain.Student">
        select * from student where name=#{myname} or age=#{age}
    </select>


    <select id="selectStudentReturnViewStudent" resultType="ViewStudent">
        select * from student where id=#{myid}
    </select>

<!--    sql执行后返回一行一列数据-->
    <select id="countStudent" resultType="int">
        select count(*) from student
    </select>

<!--    使用自定义别名-->
    
    <select id="selectByAge" resultType="Student">
        select * from student where age=#{myage};
    </select>

<!--返回map
        1).列名是map的key,列值是map的value
        2).咋能最多返回一行记录;大于一行会报错
-->
<!--    <select id="selectMapById" resultType="java.util.HashMap">-->
    <select id="selectMapById" resultType="map">
        select id,name,age from student where id=#{id}
    </select>

<!--使用resultMap
        1).先定义resultMap
            定义resultMap:
                id:自定义名称,表示你定义的这个resultMap
                type:Java类型的全限定名称
        2).在select标签中,使用resultMap来应用1)的定义
    -->
    <resultMap id="studentMap" type="com.java.domain.Student">
<!--        列名和java属性的关系-->
<!--        主键列,使用id标签
                column:列名
                property:Java类型的属性名
-->
        <id column="id" property="id"/>
<!--        非主键列,使用result-->
        <result column="name" property="email"/>
        <result column="email" property="name"/>
        <result column="age" property="age"/>
    </resultMap>
    <select id="selectAllStudents" resultMap="studentMap">
        select * from student
    </select>


<!--    列名和属性名不相同,解决方法一:
            使用resultMap
-->
<!--    <select id="selectMyStudent" resultType="com.java.domain.MyStudent">-->
<!--        select * from student-->
<!--    </select>-->
    <resultMap id="myStudent" type="com.java.domain.MyStudent">
        <id column="id" property="stuId"/>
        <result column="name" property="stuName"/>
        <result column="email" property="stuEmail"/>
        <result column="age" property="stuAge"/>
    </resultMap>
    <select id="selectMyStudent" resultMap="myStudent">
        select * from student
    </select>

<!--    列名和属性名不相同,解决方法二:
            resultType的默认原则是:同名的列值赋值给同名的属性,可以使用列别名(id as stuId)
-->
    <select id="selectDiffColProperty" resultType="com.java.domain.MyStudent">
        select id as stuId,name as stuName,email as stuEmail,age as stuAge from student
    </select>


<!--    模糊查询,第一种方法:
            使用Java代码指定like的内容
-->
    <select id="selectLikeOne" resultType="com.java.domain.Student">
        select * from student where name like #{name}
    </select>
<!--    模糊查询,第二种方式
             在mapper文件中拼接like的内容
-->
    <select id="selectLikeTwo" resultType="com.java.domain.Student">
        select * from student where name like  #{name} "%"
    </select>


<!--
    动态sql:
        1.<if>
            <if test="使用参数Java对象的属性值作为判断条件,语法: 属性 = xxx值">
-->
    <select id="selectStudentIf" resultType="com.java.domain.Student">
        select * from student
        where 1=1
        <if test="name != null and name != ''">
            and name=#{name}
        </if>
        <if test="age > 0">
            or age > #{age}
        </if>
    </select>

    <select id="selectStudentIfTwo" resultType="com.java.domain.Student">
        select * from student
        where 1=1
        <if test="name != null and name != ''">
            and name like #{name}
        </if>
        <if test="age >= 18">
            and age > #{age}
        </if>
    </select>

<!--
    2.<where>:
            <where> <if> </if><if> </if> ...... </where>
-->
    <select id="selectStudentWhere" resultType="com.java.domain.Student">
        select * from student
        <where>
            <if test="name != null and name != ''">
                and name like #{name}
            </if>
            <if test="age >= 18">
                and age > #{age}
            </if>
        </where>
    </select>


<!--
    3.<foreach>用法一:
-->
    <select id="selectForeachOne" resultType="com.java.domain.Student">
        select * from student where id in
        <foreach collection="list" item="myid" open="(" close=")" separator=",">
            #{myid}
        </foreach>
    </select>

<!--
    3.<foreach>用法二：
-->
<!--
    <select id="selectForeachTwo" resultType="com.java.domain.Student">
        select * from student where id in
        <foreach collection="list" item="student" open="(" close=")" separator=",">
            #{student.id}
        </foreach>
    </select>
    下面是简洁版：
 -->
    <select id="selectForeachTwo" resultType="com.java.domain.Student">
        select * from student where id in (
        <foreach collection="list" item="student" separator=",">
            #{student.id}
        </foreach>
        )
    </select>

    <select id="selectForeachTwotwo" resultType="com.java.domain.Student">
        <include refid="studentSql1"/> where name  in (
         <foreach collection="list" item="student" separator=",">
             #{student.name}
         </foreach>
        )
    </select>



<!--
    Sql代码片段,复用一些语法
-->
<!--    先定义sql片段-->
    <sql id="studentSql1">
        select * from student
    </sql>
    <select id="selectStudentSqlFragment" resultType="com.java.domain.Student">
        -- 使用动态Sql语句
        <include refid="studentSql1"/>
        where id in (
        <foreach collection="list" item="student" separator=",">
            #{student.id} ,#{student.name}
        </foreach>
        )
    </select>


    <!--    查询所有,使用PageHelper-->
    <select id="selectAll" resultType="com.java.domain.Student">
        select * from student
    </select>
    <!--
        parameterType:dao接口中方法参数的数据类型
        parameterType它的值是Java的数据类型全限定名称或者是mybatis定义的别名
        例如：
            parameterType="java.lang.Integer"
            parameterType="int"

        注意:
            parameterType不是强制的,mybatis通过反射机制能够发现接口参数的数据类型
            所以可以没有,可以不写。

            使用#{}之后,mybatis执行sql是使用的JDBC的PerparedStatement对象:
            由MyBatis执行下面的代码:
                1.MyBatis创建Connection,PreparedStatement对象
                    String sql = "select * from student where id = ?";
                    PreparedStatement pst = connection.preparedStatement(sql);
                    pst.setInt(1,1001);
                2.执行sql封装为resultType = "com.java.domain.Student";
                    ResultSet resultSet = preparedStatement.executeQuery();
                    Student student = null;
                    while(resultSet.next()){
                    //从数据库取表的一行数据,存到一个Java对象属性中
                        student = new Student();
                        student.setId(resultSet.getInt("id"));
                        student.setName(resultSet.getInt("name"));
                        student.setEmail(resultSet.getInt("email"));
                        student.setAge(resultSet.getInt("age"));
                    }
                    return student;//给了方法调用的返回值
    -->
</mapper>

<!--
    sql映射文件(sql mapper)：
        写sql语句的，mybatis会执行这些sql
    1.指定约束文件：
        <!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    mybatis-3-mapper.dtd：约束文件的名称，扩展名是dtd

    2.约束文件的作用：
        限制，检查在当前文件中出现的标签，属性必须是符合mybatis的要求的。

    3.mapper:
        是当前文件的根标签，必须存在的；
      namespace：
        命名空间，唯一值，可以是自定义的字符串；
        要求你使用的dao接口的全限定名称。
        com.java.dao.StudentDao
    4.在当前文件中，可以使用特点的标签，表示数据的特定操作
        <select>：表示执行查询，执行的是select语句
        <update>：表示执行更新数据库的操作，就是在<update>标签中，写的是uodate sql 语句
        <insert>：表示插入，放的是insert语句
        <delete>：表示删除，执行的是delete语句

    5.id：你要执行的sql语法的唯一标识，mybatis回使用这个id的值来找到要执行的sql语句
            可以自定义，但要求你使用的接口中方法的名称
      resultType：
            表示结果类型，是sql语句执行后得到ResultSet，遍历这个ResultSet得到的Java对象的类型
            值写的类型是全限定名称 <com.java.domain.Student>
-->