<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.java.dao.StudentDao">
<!--    查询操作-->
    <select id="selectStudent" resultType="com.java.domain.Student">
        select * from student
    </select>

<!--    插入操作-->
    <insert id="insertStudent">
--         insert into student values(20004,"周齐","zhouqi@110.com",20);
        insert into student values(#{id},#{name},#{email},#{age});
    </insert>

    <select id="selectStudentById"  resultType="com.java.domain.Student">
        select * from student where id=#{id}
    </select>

    <select id="selectStudentByName" resultType="com.java.domain.Student">
        select * from student where name=#{name}
    </select>

    <select id="selectStudentByAge" resultType="com.java.domain.Student">
        select * from student where age >= #{age}
    </select>

<!--多个参数：使用Param命名-->
    <select id="selectMulitParam" resultType="com.java.domain.Student">
        select * from student where name=#{myname} or age=#{myage}
    </select>

    <select id="selectXhnlParam" resultType="com.java.domain.Student">
        select * from student where id=#{myid} and age=#{myage}
    </select>


    <select id="selectUseOredr" resultType="com.java.domain.Student">
        select * from student order by ${colName}
    </select>
<!--多个参数：使用Java对象的属性值,作为参数实际值
        使用对象语法：#{属性名 , javaType=类型名称 , jdbcType=数据类型}很少用
        javaType:java中的属性数据类型
        jdbcType:在数据库中的数据类型
        例如：
            #{paramName , javaType=java.lang.String , jdbcType=VARCHAR}

       简化方式：
            #{属性名}
-->
<!--    <select id="selectMulitObject" resultType="com.java.domain.Student">-->
<!--        select * from student where-->
<!--        name=#{paramName,javaType=java.lang.String,jdbcType=VARCHAR}-->
<!--        or age=#{paramAge,javaType=java.lang.Integer,jdbcType=Integer}-->
<!--    </select>-->
    <select id="selectMulitObject" resultType="com.java.domain.Student">
        select * from student where name=#{paramName} or age=#{paramAge}
    </select>

    <select id="selectMulitStudent" resultType="com.java.domain.Student">
        select * from student where name=#{name} or age=#{age}
    </select>

<!--    按位置-->
    <select id="selectByNameAndAge" resultType="com.java.domain.Student">
        select * from student where name=#{arg0} or age=#{arg1}
    </select>

<!--    使用Map集合-->
    <select id="selectMulitMap" resultType="com.java.domain.Student">
        select * from student where name=#{myname} or age=#{age}
    </select>
    <!--
        parameterType:dao接口中方法参数的数据类型
        parameterType它的值是Java的数据类型全限定名称或者是mybatis定义的别名
        例如：
            parameterType="java.lang.Integer"
            parameterType="int"

        注意:
            parameterType不是强制的,mybatis通过反射机制能够发现接口参数的数据类型
            所以可以没有,可以不写。

            使用#{}之后,mybatis执行sql是使用的JDBC的PerparedStatement对象:
            由MyBatis执行下面的代码:
                1.MyBatis创建Connection,PreparedStatement对象
                    String sql = "select * from student where id = ?";
                    PreparedStatement pst = connection.preparedStatement(sql);
                    pst.setInt(1,1001);
                2.执行sql封装为resultType = "com.java.domain.Student";
                    ResultSet resultSet = preparedStatement.executeQuery();
                    Student student = null;
                    while(resultSet.next()){
                    //从数据库取表的一行数据,存到一个Java对象属性中
                        student = new Student();
                        student.setId(resultSet.getInt("id"));
                        student.setName(resultSet.getInt("name"));
                        student.setEmail(resultSet.getInt("email"));
                        student.setAge(resultSet.getInt("age"));
                    }
                    return student;//给了方法调用的返回值
    -->
</mapper>

<!--
    sql映射文件(sql mapper)：
        写sql语句的，mybatis会执行这些sql
    1.指定约束文件：
        <!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    mybatis-3-mapper.dtd：约束文件的名称，扩展名是dtd

    2.约束文件的作用：
        限制，检查在当前文件中出现的标签，属性必须是符合mybatis的要求的。

    3.mapper:
        是当前文件的根标签，必须存在的；
      namespace：
        命名空间，唯一值，可以是自定义的字符串；
        要求你使用的dao接口的全限定名称。
        com.java.dao.StudentDao
    4.在当前文件中，可以使用特点的标签，表示数据的特定操作
        <select>：表示执行查询，执行的是select语句
        <update>：表示执行更新数据库的操作，就是在<update>标签中，写的是uodate sql 语句
        <insert>：表示插入，放的是insert语句
        <delete>：表示删除，执行的是delete语句

    5.id：你要执行的sql语法的唯一标识，mybatis回使用这个id的值来找到要执行的sql语句
            可以自定义，但要求你使用的接口中方法的名称
      resultType：
            表示结果类型，是sql语句执行后得到ResultSet，遍历这个ResultSet得到的Java对象的类型
            值写的类型是全限定名称 <com.java.domain.Student>
-->